// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dspa5/dspa5.proto

/*
Package dspa5 is a generated protocol buffer package.

It is generated from these files:
	dspa5/dspa5.proto

It has these top-level messages:
	Empty
	Name
	Announcement
	Fragment
*/
package dspa5

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Announcement_Level int32

const (
	// no chime (other systems may not display text)
	Announcement_NOTSET Announcement_Level = 0
	// no chime
	Announcement_DEBUG Announcement_Level = 10
	// attention chime
	Announcement_INFO Announcement_Level = 20
	// warning chime
	Announcement_WARNING Announcement_Level = 30
	// alarm chime either end
	Announcement_ERROR Announcement_Level = 40
	// alarm chime either end, message repeated twice
	Announcement_CRITICAL Announcement_Level = 50
)

var Announcement_Level_name = map[int32]string{
	0:  "NOTSET",
	10: "DEBUG",
	20: "INFO",
	30: "WARNING",
	40: "ERROR",
	50: "CRITICAL",
}
var Announcement_Level_value = map[string]int32{
	"NOTSET":   0,
	"DEBUG":    10,
	"INFO":     20,
	"WARNING":  30,
	"ERROR":    40,
	"CRITICAL": 50,
}

func (x Announcement_Level) String() string {
	return proto.EnumName(Announcement_Level_name, int32(x))
}
func (Announcement_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Name struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Name) Reset()                    { *m = Name{} }
func (m *Name) String() string            { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()               {}
func (*Name) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// similar to a python log handler
type Announcement struct {
	Message string             `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Level   Announcement_Level `protobuf:"varint,2,opt,name=level,enum=dspa5.Announcement_Level" json:"level,omitempty"`
}

func (m *Announcement) Reset()                    { *m = Announcement{} }
func (m *Announcement) String() string            { return proto.CompactTextString(m) }
func (*Announcement) ProtoMessage()               {}
func (*Announcement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Announcement) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Announcement) GetLevel() Announcement_Level {
	if m != nil {
		return m.Level
	}
	return Announcement_NOTSET
}

// message fragments as they happen
type Fragment struct {
	Chime bool   `protobuf:"varint,1,opt,name=chime" json:"chime,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Error bool   `protobuf:"varint,3,opt,name=error" json:"error,omitempty"`
}

func (m *Fragment) Reset()                    { *m = Fragment{} }
func (m *Fragment) String() string            { return proto.CompactTextString(m) }
func (*Fragment) ProtoMessage()               {}
func (*Fragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Fragment) GetChime() bool {
	if m != nil {
		return m.Chime
	}
	return false
}

func (m *Fragment) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Fragment) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "dspa5.Empty")
	proto.RegisterType((*Name)(nil), "dspa5.Name")
	proto.RegisterType((*Announcement)(nil), "dspa5.Announcement")
	proto.RegisterType((*Fragment)(nil), "dspa5.Fragment")
	proto.RegisterEnum("dspa5.Announcement_Level", Announcement_Level_name, Announcement_Level_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Dspa5 service

type Dspa5Client interface {
	// system will transform message into fragments and stream them back as they
	// are announced.
	Speak(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (Dspa5_SpeakClient, error)
}

type dspa5Client struct {
	cc *grpc.ClientConn
}

func NewDspa5Client(cc *grpc.ClientConn) Dspa5Client {
	return &dspa5Client{cc}
}

func (c *dspa5Client) Speak(ctx context.Context, in *Announcement, opts ...grpc.CallOption) (Dspa5_SpeakClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dspa5_serviceDesc.Streams[0], c.cc, "/dspa5.Dspa5/Speak", opts...)
	if err != nil {
		return nil, err
	}
	x := &dspa5SpeakClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dspa5_SpeakClient interface {
	Recv() (*Fragment, error)
	grpc.ClientStream
}

type dspa5SpeakClient struct {
	grpc.ClientStream
}

func (x *dspa5SpeakClient) Recv() (*Fragment, error) {
	m := new(Fragment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dspa5 service

type Dspa5Server interface {
	// system will transform message into fragments and stream them back as they
	// are announced.
	Speak(*Announcement, Dspa5_SpeakServer) error
}

func RegisterDspa5Server(s *grpc.Server, srv Dspa5Server) {
	s.RegisterService(&_Dspa5_serviceDesc, srv)
}

func _Dspa5_Speak_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Announcement)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Dspa5Server).Speak(m, &dspa5SpeakServer{stream})
}

type Dspa5_SpeakServer interface {
	Send(*Fragment) error
	grpc.ServerStream
}

type dspa5SpeakServer struct {
	grpc.ServerStream
}

func (x *dspa5SpeakServer) Send(m *Fragment) error {
	return x.ServerStream.SendMsg(m)
}

var _Dspa5_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dspa5.Dspa5",
	HandlerType: (*Dspa5Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Speak",
			Handler:       _Dspa5_Speak_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dspa5/dspa5.proto",
}

func init() { proto.RegisterFile("dspa5/dspa5.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xad, 0x36, 0x6b, 0xfb, 0x1c, 0x1a, 0x9f, 0x3b, 0xd4, 0x1d, 0x64, 0xf4, 0xd4, 0x53,
	0x27, 0x15, 0xc1, 0x6b, 0xdd, 0xba, 0x51, 0x19, 0x29, 0x64, 0x15, 0xcf, 0x71, 0x86, 0x29, 0xae,
	0x3f, 0x68, 0xab, 0xe8, 0x9f, 0xe4, 0x7f, 0x29, 0x49, 0x57, 0xf0, 0xb0, 0x4b, 0x78, 0x9f, 0xf0,
	0x09, 0xef, 0xfb, 0x0d, 0x5c, 0xbc, 0x36, 0x95, 0xb8, 0x9b, 0xea, 0x33, 0xa8, 0xea, 0xb2, 0x2d,
	0x91, 0x68, 0xf0, 0x2c, 0x20, 0x71, 0x5e, 0xb5, 0x3f, 0xde, 0x18, 0x4c, 0x26, 0x72, 0x89, 0x08,
	0x66, 0x21, 0x72, 0xe9, 0x1a, 0x13, 0xc3, 0x77, 0xb8, 0x9e, 0xbd, 0x5f, 0x03, 0x86, 0x51, 0x51,
	0x94, 0x9f, 0xc5, 0x46, 0xe6, 0xb2, 0x68, 0xd1, 0x05, 0x2b, 0x97, 0x4d, 0x23, 0xb6, 0xbd, 0xd7,
	0x23, 0x4e, 0x81, 0xec, 0xe4, 0x97, 0xdc, 0xb9, 0xc7, 0x13, 0xc3, 0x3f, 0x0b, 0xaf, 0x82, 0x6e,
	0xe7, 0xff, 0xd7, 0xc1, 0x4a, 0x09, 0xbc, 0xf3, 0x3c, 0x06, 0x44, 0x33, 0x02, 0x0c, 0x58, 0x9a,
	0xad, 0xe3, 0x8c, 0x1e, 0xa1, 0x03, 0x64, 0x1e, 0x3f, 0x3c, 0x2d, 0x29, 0xa0, 0x0d, 0x66, 0xc2,
	0x16, 0x29, 0x1d, 0xe1, 0x29, 0x58, 0xcf, 0x11, 0x67, 0x09, 0x5b, 0xd2, 0x6b, 0x65, 0xc4, 0x9c,
	0xa7, 0x9c, 0xfa, 0x38, 0x04, 0x7b, 0xc6, 0x93, 0x2c, 0x99, 0x45, 0x2b, 0x1a, 0x7a, 0x8f, 0x60,
	0x2f, 0x6a, 0xb1, 0xd5, 0x31, 0x47, 0x40, 0x36, 0x6f, 0xef, 0xfb, 0x32, 0x36, 0xef, 0x40, 0x35,
	0x6c, 0xe5, 0x77, 0xab, 0x13, 0x3a, 0x5c, 0xcf, 0xca, 0x94, 0x75, 0x5d, 0xd6, 0xee, 0x49, 0x67,
	0x6a, 0x08, 0xef, 0x81, 0xcc, 0x55, 0x7c, 0xd5, 0x6a, 0x5d, 0x49, 0xf1, 0x81, 0x97, 0x07, 0xfa,
	0x8c, 0xcf, 0xf7, 0x97, 0xfd, 0xde, 0x1b, 0xe3, 0x65, 0xa0, 0x3f, 0xf9, 0xf6, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x7c, 0x44, 0xe7, 0xa6, 0x79, 0x01, 0x00, 0x00,
}
